{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","getPropName","field","fieldName","split","pop","toLowerCase","word","toUpperCase","join","replace","NewMovie","onAdd","count","setCount","fields","Description","isFormDisabled","min","Object","keys","filter","length","onSubmit","preventDefault","movieData","reduce","assign","forEach","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"0uEAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,uBCQpC,IAAMC,EAA6B,SAAC,GAOpC,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,MAKI,IAJJC,aAII,MAJIF,EAIJ,MAHJG,mBAGI,sBAHmBD,GAGnB,MAFJE,gBAEI,aADJC,gBACI,MADO,WAAQ,EACf,EAEJ,EAAaC,oBAAS,2BAASN,EAAT,YAdfO,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAYa,IAAfC,EAAP,oBAGA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACMC,EAAWF,GAAWR,IAAaH,EAEzC,OACE,sBAAKd,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ4B,QAASJ,EAAlC,SACGT,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACE6B,KAAK,OACLL,GAAIA,EACJ,0BAAkBX,GAClBb,UAAW8B,IAAW,QAAS,CAC7B,YAAaH,IAEfX,YAAaA,EACbF,MAAOA,EACPI,SAAU,SAAAa,GAAK,OAAIb,EAASa,EAAMC,OAAOlB,MAA1B,EACfmB,OAAQ,kBAAMP,GAAW,EAAjB,MAIXC,GACC,mBAAG3B,UAAU,iBAAb,mBAAkCe,EAAlC,oBAIP,ECnDKmB,EAAc,SAACC,GACnB,IAAMC,EAAYD,EAAME,MAAM,KAAKC,OAASH,EAE5C,OAAQC,EAAU,GAAGG,cAAgBH,EAAUC,MAAM,KAClD3B,KAAI,SAAA8B,GAAI,OAAIA,EAAK,GAAGC,cAAgBD,EAAKjB,MAAM,GAAGgB,aAA1C,IACRG,KAAK,IAAInB,MAAM,IAAIoB,QAAQ,QAAS,MACxC,EAEYC,EAAgC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC9C,EAA0B1B,mBAAS,GAAnC,mBAAO2B,EAAP,KAAcC,EAAd,KACMC,EAKF,CACF,SAAU7B,mBAAiB,IAC3B8B,YAAa9B,mBAAiB,IAC9B,aAAcA,mBAAiB,IAC/B,YAAaA,mBAAiB,IAC9B,WAAYA,mBAAiB,KAEzB+B,EAEgD,IAF/B9B,KAAK+B,IAAL,MAAA/B,KAAI,YAAQgC,OAAOC,KAAKL,GAC5CM,QAAO,SAAAnB,GAAK,MAAiB,MAAbA,EAAM,EAAV,IACZzB,KAAI,SAAA0B,GAAS,OAAIY,EAAOZ,GAAW,GAAGmB,MAAzB,MAgBhB,OACE,uBACEvD,UAAU,WAEVwD,SAlBiB,SAACzB,GAEpB,GADAA,EAAM0B,kBACDP,EAAgB,CACnB,IAAMQ,EAAkBN,OAAOC,KAAKL,GACjCW,QAAO,SAAC5D,EAAOoC,GAAR,OAAkBiB,OAAOQ,OAAO7D,EAAdqD,OAAA,IAAAA,CAAA,GACvBlB,EAAYC,GAASa,EAAOb,GAAO,IAD9B,GAEJ,CAAC,GAEPU,EAAMa,GACNX,EAASD,EAAQ,GACjBM,OAAOC,KAAKL,GAAQa,SAAQ,SAAChD,GAAD,OAAiBmC,EAAOnC,GAAM,GAAG,GAAjC,GAC7B,CACF,EAGC,UAKE,oBAAIb,UAAU,QAAd,yBACCoD,OAAOC,KAAKL,GAAQtC,KAAI,SAACyB,GAAD,OACvB,cAAC,EAAD,CAEEtB,KAAMqB,EAAYC,GAClBpB,MAAK,UAAKoB,EAAME,MAAM,KAAKC,OAASH,GACpCrB,MAAOkC,EAAOb,GAAO,GACrBjB,SAAU8B,EAAOb,GAAO,GACxBlB,SAAsC,IAA5BkB,EAAME,MAAM,KAAKkB,QALtBpB,EAFgB,IAWzB,qBAAKnC,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACE6B,KAAK,SACL,UAAQ,gBACR7B,UAAU,iBACV8D,SAAUZ,EAJZ,uBAjBCJ,EA6BV,E,QCzEYiB,EAAM,WACjB,MAA4B5C,mBAAkB6C,GAA9C,mBAAOvD,EAAP,KAAewD,EAAf,KAIA,OACE,sBAAKjE,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAEtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAU6C,MARC,SAAC9C,GAAD,OAAiBkE,EAAU,GAAD,mBAAKxD,GAAL,CAAaV,IAAvC,QAYlB,EClBDmE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.4382b1e8.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { FormEvent, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype MovieProps = {\n  onAdd: (movie:Movie) => void;\n};\n\nconst getPropName = (field:string):string => {\n  const fieldName = field.split('!').pop() || field;\n\n  return (fieldName[0].toLowerCase() + fieldName.split(' ')\n    .map(word => word[0].toUpperCase() + word.slice(1).toLowerCase())\n    .join('').slice(1)).replace('image', 'img');\n};\n\nexport const NewMovie:React.FC<MovieProps> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const fields:{\n    [fieldName:string]: [\n      string,\n      React.Dispatch<React.SetStateAction<string>>,\n    ];\n  } = {\n    '!Title': useState<string>(''),\n    Description: useState<string>(''),\n    '!Image URL': useState<string>(''),\n    '!Imdb URL': useState<string>(''),\n    '!Imdb ID': useState<string>(''),\n  };\n  const isFormDisabled = Math.min(...Object.keys(fields)\n    .filter(field => field[0] === '!')\n    .map(fieldName => fields[fieldName][0].length)) === 0;\n\n  const handleSubmit = (event:FormEvent):void => {\n    event.preventDefault();\n    if (!isFormDisabled) {\n      const movieData:Movie = Object.keys(fields)\n        .reduce((movie, field) => Object.assign(movie, {\n          [getPropName(field)]: fields[field][0],\n        }), {}) as Movie;\n\n      onAdd(movieData);\n      setCount(count + 1);\n      Object.keys(fields).forEach((name:string) => fields[name][1](''));\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n      {Object.keys(fields).map((field:string) => (\n        <TextField\n          key={field}\n          name={getPropName(field)}\n          label={`${field.split('!').pop() || field}`}\n          value={fields[field][0]}\n          onChange={fields[field][1]}\n          required={field.split('!').length === 2}\n        />\n      ))}\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isFormDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (movie:Movie) => setMovies([...movies, movie]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}